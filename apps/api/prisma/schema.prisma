generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String               @unique
  firstName           String?
  lastName            String?
  stripeCustomerId    String?              @unique
  emailVerifiedAt     DateTime?
  createdAt           DateTime?            @default(now())
  stripeSubscriptions StripeSubscription[]
  grantedAccess       GrantedAccess[]

  @@map("users")
}

model StripeSubscription {
  id                   String    @id
  status               String
  stripeCustomerId     String
  currency             String    @default("usd")
  cancelAtPeriodEnd    Boolean   @default(false)
  productId            String
  planId               String
  interval             String
  intervalCount        Int
  startDate            DateTime
  endDate              DateTime?
  cancelAtDate         DateTime?
  canceledAtDate       DateTime?
  trialStartDate       DateTime?
  trialEndDate         DateTime?
  pauseResumesAt       DateTime?
  isPausedIndefinitely Boolean   @default(false)
  metadata             Json      @default("{}")
  user                 User      @relation(fields: [stripeCustomerId], references: [stripeCustomerId], onDelete: Cascade)
  createdAt            DateTime  @default(now())

  @@map("stripe_subscriptions")
}

model GrantedAccess {
  userId    String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String
  grantedBy String
  startDate DateTime
  endDate   DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
  @@map("granted_access")
}

model StripeEvent {
  stripeEventId String   @id
  type          String
  payload       Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("stripe_events")
}
